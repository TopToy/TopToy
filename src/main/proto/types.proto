syntax = "proto3";
option java_package = "proto";
package proto;


message Meta {
    int32 channel = 1;
//    int32 sender = 2;
    int32 cid = 3;
    int32 cidSeries = 4;
}



message BbcDecision {
    Meta m = 1;
    int32 decosion = 2;
    int32 sender = 3;
}

message BlockID {
    int32 pid = 1;
    int32 bid = 2;
}

message BlockHeader {
    Meta m = 1;
    bytes prev= 2;
    int32 height = 3;
    bytes transactionHash = 4;
    string proof = 5;
    BlockID bid = 6;
    bool empty = 7;
}

message BbcMsg {
    Meta m = 1;
    bool vote = 2;
    BlockHeader next = 3;
    int32 height = 4;
    int32 sender = 5;
}

message blockStatistics {
//    int64 created = 1; // creation ts
    int64 sign = 2; // the time that signature took
    int64 proposed = 3; // propose ts
    int64 verified = 4; // verification time
    int64 channelDecided = 5; // tentative decision
    int64 pd = 6; // permanent decision
    int64 decided = 7; // decision ts
}

message Block {
    BlockHeader header = 1;
    BlockID id = 2;
    repeated Transaction data = 3;
    blockStatistics st = 4;
}

message Comm {
    int32 channel = 1;
    Block data = 2;
}

//TODO: Adding: client signature, client public key etc.
//message txID {
//    string txID = 1;
//}

message txID {
    int32 proposerID = 1;
    int32 bid = 2;
    int32 txNum = 3;
    int32 channel = 4;
}
message Transaction {
    int32 clientID = 1;
    txID id = 2;
    bytes data = 3; // generic data type
    int64 clientTs = 4;
    int64 serverTs = 5;
}

message accepted {
    bool accepted = 1;
    txID txID = 2;
}

message approved {
    Transaction tx = 1;
    blockStatistics st = 3;
}

message read {
    txID txID = 1;
}

message ForkProof {
    int32 sender = 1;
    Block curr = 2;
    Block prev = 3;
//    bool done = 4;
}

message RBMsg {
    Meta m = 1;
    int32 type = 2;
    bytes data = 3;
    int32 sender = 4;
}

message Empty {

}


message WrbReq {
    Meta _meta = 1;
    int32 height = 2;
    int32 sender = 3;
}

message WrbRes {
    Meta m = 1;
    BlockHeader data = 2;
    int32 sender = 3;
}

message EvidenceReq {
    Meta _meta = 1;
    int32 height = 2;
    int32 sender = 3;
}

message EvidenceRes {
    Meta m = 1;
    BlockHeader data = 2;
    int32 sender = 3;
}

message subChainVersion {
    int32 forkPoint = 1;
    int32 suggested = 2;
    repeated Block v = 3;
    int32 sender = 4;
}

message commReq {
    BlockHeader proof = 1;
}

message commRes {
    Block b = 1;
}
