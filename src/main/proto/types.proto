syntax = "proto3";
option java_package = "proto";
package proto;


message Meta {
    int32 channel = 1;
    int32 sender = 2;
    int32 cid = 3;
    int32 cidSeries = 4;
}


message BbcMsg {
    Meta m = 1;
    int32 vote = 2;
    Block next = 3;
}


message BbcDecision {
    Meta m = 1;
    int32 decosion = 2;
}

message BlockHeader {
    Meta m = 1;
    bytes prev= 2;
//    int32 creatorID = 2;
    int32 height = 3;
    bytes transactionHash = 4;
    string proof = 5;
//    bool present = 6;
//    int32 cid = 5;
//    int32 cidSeries = 6;
}

//message BlockFooter {
////    string rmfProof = 1;
//    int64 ts = 2;
////    bytes orig = 3; // Enable to cerate an empty block
//}

message blockStatistics {
//    int64 created = 1; // creation ts
    int64 sign = 2; // the time that signature took
    int64 proposed = 3; // propose ts
    int64 verified = 4; // verification time
    int64 channelDecided = 5; // tentative decision
    int64 pd = 6; // permanent decision
    int64 decided = 7; // decision ts
}

message Block {
    BlockHeader header = 1;
    repeated Transaction data = 2;
    blockStatistics st = 3;
}

//TODO: Adding: client signature, client public key etc.
//message txID {
//    string txID = 1;
//}

message txID {
    int32 proposerID = 1;
    int64 txNum = 2;
    int32 channel = 3;
}
message Transaction {
    int32 clientID = 1;
    txID id = 2;
    bytes data = 3; // generic data type
    int64 clientTs = 4;
    int64 serverTs = 5;
}

message accepted {
    bool accepted = 1;
    txID txID = 2;
}

message approved {
    Transaction tx = 1;
    blockStatistics st = 3;
}

message read {
    txID txID = 1;
}

message ForkProof {
    int32 sender = 1;
    Block curr = 2;
//    string currSig = 3;
    Block prev = 4;
//    string prevSig = 5;
}

message RBMsg {
    Meta m = 1;
    bytes data = 3;
}

message Empty {

}



//message Auth {
//    Meta m = 1;
//    bytes hash = 2;
//}

//message Data {
//    Meta _meta = 1;
//    bytes data = 2;
//    string sig = 3;
//}

message Req {
    Meta _meta = 1;
}

message PreConsReq {
    Meta _meta = 1;
}

message Res {
    Meta m = 1;
    Block data = 2;
}

//message RmfResult {
////    int32 cid = 1;
////    int32 cidSeries = 2;
//    bytes data = 1;
//    string type = 2;
//}

//message proofedBlock {
//    Block b = 1;
////    int32 cid = 2;
//    string Sig = 3;
//    //    repeated BbcDecision votes = 4;
//}

message subChainVersion {
    int32 forkPoint = 1;
    int32 suggested = 2;
    //    repeated frontSupport fp = 3;
    repeated Block v = 3;
    int32 sender = 4;
}

//message VpbcMsg {
//    int32 clientID = 1;
//    int32 consID = 2;
//    bytes data = 3;
//}